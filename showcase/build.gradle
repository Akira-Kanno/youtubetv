buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}



android {
    compileSdkVersion 25
    buildToolsVersion "25.0.1"
    signingConfigs {
        playStore
    }

    defaultConfig {
        applicationId "fr.bmartel.youtubetv.showcase"
        minSdkVersion 21
        targetSdkVersion 25
        versionCode 2
        versionName "1.0"
    }
    buildTypes {


        debug {
            buildConfigField "boolean", "USE_CRASHLYTICS", "false"
            ext.enableCrashlytics = false
        }

        release {
            buildConfigField "boolean", "USE_CRASHLYTICS", "false"
            ext.enableCrashlytics = false
            minifyEnabled true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        production {
            buildConfigField "boolean", "USE_CRASHLYTICS", "true"
            ext.enableCrashlytics = true
            minifyEnabled true
            zipAlignEnabled true
            signingConfig signingConfigs.playStore
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
}

def build_param = "${build}";

if (build_param != "production") {

    //exclude production build
    android.variantFilter { variant ->
        if (variant.buildType.name.equals('production')) {
            variant.setIgnore(true);
        }
    }
} else {
    //exclude all except production build
    android.variantFilter { variant ->
        if (!variant.buildType.name.equals('production')) {
            variant.setIgnore(true);
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    //compile 'fr.bmartel:youtubetv:1.0'
    compile project(':youtubetv')
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile('com.crashlytics.sdk.android:crashlytics:2.6.5@aar') {
        transitive = true;
    }
    compile('com.crashlytics.sdk.android:answers:1.3.10@aar') {
        transitive = true;
    }

    // leanback & preference
    compile 'com.android.support:leanback-v17:25.0.1'
    compile 'com.android.support:preference-v14:25.0.1'
    compile 'com.android.support:preference-leanback-v17:25.0.1'
    compile 'com.android.support:preference-v7:25.0.1'
}

def Properties props = new Properties()
def propFile = new File('signing.properties')

if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))
}

if (props.containsKey('STORE_FILE')
        && props.containsKey('STORE_PASSWORD')
        && props.containsKey('KEY_ALIAS')
        && props.containsKey('KEY_PASSWORD')) {
    android.signingConfigs.playStore.storeFile = file(props['STORE_FILE'])
    android.signingConfigs.playStore.storePassword = props['STORE_PASSWORD']
    android.signingConfigs.playStore.keyAlias = props['KEY_ALIAS']
    android.signingConfigs.playStore.keyPassword = props['KEY_PASSWORD']
} else {
    println 'signing.properties not found or incomplete'
    android.buildTypes.release.signingConfig = null
}

